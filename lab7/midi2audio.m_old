function [y,Fs]=midi2audio(input,Fs,synthname,voicemap)
% y = midi2audio(input, Fs, synthtype)
% y = midi2audio(input, Fs)
% y = midi2audio(input)
%
% Convert midi structure to a digital waveform
%
% Inputs:
%  input - can be one of:
%    a structure: matlab midi structure (created by readmidi.m)
%    a string: a midi filename
%    other: a 'Notes' matrix (as ouput by midiInfo.m)
%
%  synthtype - string to choose synthesis method
%      passed to synth function in synth.m
%      current choices are: 'fm', 'sine' or 'saw'
%      default='fm'
%
%  Fs - sampling frequency in Hz (beware of aliasing!)
%       default =  44.1e3

% Copyright (c) 2009 Ken Schutte
% more info at: http://www.kenschutte.com/midi

% Adapted for use in ECE180 to allow multitimbral synthesis
% instead of only a single synthesizer for all channels:
% 1. The input argument "synthtype" is now a cell array of 
%    strings instead of a single string.
% 2. The new argument "synthname" contains a function name so
%    that the "synth" function does not have to be hardcoded
%    into this function.
%
%   ECE180: Introduction to Signal Processing
%   Rose-Hulman Institute of Technology
%   Edited 15 Jul 2014

if (nargin<2)
  Fs=44.1e3;
end
% MODIFIED: REMOVE NEXT THREE LINES
% if (nargin<3)
%   synthtype='fm';
% end

endtime = -1;
if (isstruct(input))
  [Notes,endtime] = midiInfo(input,0);
elseif (ischar(input))
  [Notes,endtime] = midiInfo(readmidi(input), 0);
else
  Notes = input;
end

% t2 = 6th col
if (endtime == -1)
  endtime = max(Notes(:,6));
end
if (length(endtime)>1)
  endtime = max(endtime);
end

% MODIFIED: change to column vector
% = zeros(1,ceil(endtime*Fs));
y = zeros(ceil(endtime*Fs),1);

for i=1:size(Notes,1)

  f = midi2freq(Notes(i,3));
  dur = Notes(i,6) - Notes(i,5);
  amp = Notes(i,4)/127;

  % MODIFIED: REPLACE NEXT LINE
  %yt = synth(f, dur, amp, Fs, synthtype);
  yt = feval(synthname,f, dur, amp, Fs, voicemap(Notes(i,2)+1)); % NEW

  n1 = floor(Notes(i,5)*Fs)+1;
  N = length(yt);  

  % MODIFIED: Remove "reshape" function
  % ensure yt is [1,N]:
  %y(n1:n1+N-1) = y(n1:n1+N-1) + reshape(yt,1,[]);
  y(n1:n1+N-1) = y(n1:n1+N-1) + yt;

end

%MODIFIED: Add normalization to +/- 1 range
y = y / max(y);
